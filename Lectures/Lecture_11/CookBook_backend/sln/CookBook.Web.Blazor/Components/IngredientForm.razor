@using CookBook.Models
@inherits CookBook.Web.Blazor.Pages.PageBase

<EditForm Model="@Data" OnValidSubmit="@Save"  >
    <DataAnnotationsValidator />

    <div class="form-group">
        <label class="w-100">
            Name:
            <InputText @bind-Value="@Data.Name" class="form-control"/>
            <small class="form-text text-danger"><ValidationMessage For="@(()=>Data.Name)"/></small>
        </label>
    </div>

    <div class="form-group">
        <label class="w-100">
            Description:
            <InputTextArea @bind-Value="@Data.Description" class="form-control" />
            <small class="form-text text-danger"><ValidationMessage For="(()=>Data.Description)"/></small>
        </label>
    </div>

    <button type="submit" class="btn btn-success">Save</button>
    @if (Id != Guid.Empty)
    {
        <button @onclick="@Delete" class="btn btn-danger">Delete</button>
    }
</EditForm>


@code {
    [Parameter]
    public Guid Id { get; set; }
    
    [Parameter]
    public EventCallback OnModification { get; set; }

    public IngredientDetailModel Data { get; set; }

    [Inject]
    protected IIngredientsFacade IngredientsFacade { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (Id == Guid.Empty)
        {
            Data = new IngredientDetailModel();
        }
        else
        {
            Data = await IngredientsFacade.IngredientGetAsync(Id, Culture);
        }

        await base.OnInitializedAsync();
    }

    public async Task Save()
    {
        var resultId = await IngredientsFacade.SaveAsync(Data,Culture);
        if (OnModification.HasDelegate)
        {
            await OnModification.InvokeAsync(resultId);
        }
        Data=new IngredientDetailModel();
    }

    public async Task Delete()
    {
        await IngredientsFacade.DeleteAsync(Id,Culture);

        if (OnModification.HasDelegate)
        {
            await OnModification.InvokeAsync(null);
        }
    }

}
