@page "/{Culture}/recipe/create"
@page "/{Culture}/recipe/{Id:guid}"
@inherits CookBook.Web.Blazor.Pages.PageBase


<EditForm Model="@Data" OnValidSubmit="@Save">
    <DataAnnotationsValidator />

    <label>
        Name:
        <InputText @bind-Value="@Data.Name" />
        <ValidationMessage For="@(()=>Data.Name)" />
    </label>

    <label>
        Description:
        <InputTextArea @bind-Value="@Data.Description" />
        <ValidationMessage For="(()=>Data.Description)" />
    </label>
    <label>
        Duration:
        <InputNumber min="0" @bind-Value="DurationHour" />:<InputNumber min="0" @bind-Value="DurationMinutes" />
        <ValidationMessage For="(()=>Data.Duration)" />
    </label>
    <label>
        FoodType:
        <InputSelect @bind-Value="Data.FoodType">
            @foreach (var foodType in Enum.GetValues(typeof(FoodType)))
            {
                <option value="@foodType">@foodType</option>
            }
        </InputSelect>
        <ValidationMessage For="(()=>Data.FoodType)" />
    </label>
    <div>
        Ingredients:
        <ul>
            @foreach (var ingredient in Data.Ingredients)
            {
            <li>@ingredient.Ingredient?.Name @ingredient.Amount @ingredient.UnitText - <button @onclick="() => DeleteIngredient(ingredient)">Delete</button></li>
            }
        </ul>

        <InputSelect @bind-Value="NewIngredientModel.Ingredient" >
            @foreach (var ingredient in Ingredients)
            {
                <option value="@ingredient">@ingredient.Name</option>
            }
        </InputSelect>
        <InputNumber min="0" @bind-Value="NewIngredientModel.Amount" />
        <InputSelect @bind-Value="NewIngredientModel.Unit">
            @foreach (var unit in Enum.GetValues(typeof(Unit)))
            {
                <option value="@unit">@unit</option>
            }
        </InputSelect>
        <ValidationMessage For="(()=>NewIngredientModel)" />

        <button type="button" @onclick="@AddIngredient">Add</button>

    </div>
    <button type="submit">Save</button>
    @if (Id != Guid.Empty)
    {
        <button @onclick="@Delete">Delete</button>
    }
</EditForm>
@code {
    [Parameter]
    public Guid Id { get; set; }

    public RecipeDetailModel Data { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }
    [Inject]
    protected IRecipesFacade RecipesFacade { get; set; }

    [Inject]
    protected IIngredientsFacade IngredientFacade { get; set; }

    public ICollection<IngredientListModel> Ingredients { get; set; } = new List<IngredientListModel>();

    public int DurationHour {
        get => (int) Data.Duration.Hours;
        set => Data.Duration = new TimeSpan(value, DurationMinutes, 0);
    }
    public int DurationMinutes {
        get => (int) Data.Duration.Minutes;
        set => Data.Duration = new TimeSpan(DurationHour,value,0);
    }

    public RecipeListIngredientModel NewIngredientModel { get; set; } = new RecipeListIngredientModel();

    protected override async Task OnInitializedAsync()
    {
        if (Id == Guid.Empty)
        {
            Data = new RecipeDetailModel();
        }
        else
        {
            Data = await RecipesFacade.RecipeGetAsync(Id, Culture);
        }

        Ingredients = await IngredientFacade.IngredientsGetAsync(Culture);
        await base.OnInitializedAsync();
    }


    public async Task Save()
    {
        await RecipesFacade.SaveAsync(Data, Culture);
        NavigationManager.NavigateTo($"{Culture}/recipes");

    }

    public async Task Delete()
    {
        await RecipesFacade.DeleteAsync(Id, Culture);
        NavigationManager.NavigateTo($"{Culture}/recipes");
    }

    public void DeleteIngredient(RecipeListIngredientModel ingredient)
    {
        var ingredientIndex = Data.Ingredients.IndexOf(ingredient);
        Data.Ingredients.RemoveAt(ingredientIndex);
    }

    public void AddIngredient()
    {
        Data.Ingredients.Add(NewIngredientModel);
        NewIngredientModel = new RecipeListIngredientModel();
    }
    
}